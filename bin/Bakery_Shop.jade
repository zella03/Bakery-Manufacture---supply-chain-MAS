ontology BakeryOntology

	concept IngredientQuantity(
	    ingredientName as text,
	    quantity as integer
	)
	concept Good(
		name as text,
		ingredients as list of IngredientQuantity,
		bakingTime as duration,
		preparationTime as duration,
		batchSize as integer
	)
	
	concept OrderQuantity(
		good as text,
		type as text,
		quantity as integer
	)

	concept Order(
		id as text,
		good as text, #name of good
		status as text, #pending, in progress, completed, to fix
		type as text #normal/private
	)
	
	#concept GoodsQuantity(
	#	good as text,
	#	quantity as integer
	#)
	
	concept PackageOfGoods(
		packageId as text,
		ordersInPackage as list of OrderQuantity,
		status as text
	)
	
	concept PackagePreparation(
		packageId as text,
		prepTime as duration
	)

	action RequestOrder(agentId as aid) #only if only one order baking and not waiting for ingredients
	action AssignOrder(agentId as aid, order as Order) #if supervisor asked (or maybe just a tekst what to doo
	action RequestIngredients(agentId as aid,ingredients as list of IngredientQuantity) # request send to supplier
    action AskForHelpColleague(agentId as aid, ingredients as list of IngredientQuantity)# just if he can help with ingredients
    action RequestIngredientsColleague(agentId as aid, ingredients as list of IngredientQuantity)# specific give ingredients from celleague
    action ProvideIngredients(ingredients as list of IngredientQuantity, whileProparing as boolean) #may be with delay
	action NeedRestock(agentId as aid, ingredients as list of IngredientQuantity,whileProparing as boolean)
	action ProvidePackingList(packageList as list of PackageOfGoods)#combined of list containing private orders
	action RedoOrder(orderId as text, decision as text) #based on decision accepting the order and deleting the task from queue or order sent to redo
	action GoodToPack(order as Order) #from baker to packer
	
	predicate IngredientAvaliable(id as aid, avaliable as boolean,ingredients as list of IngredientQuantity) #wystarczy odjąć u agenta przekazującego i dodać u przyjmującego jeżeli tak
	predicate WorkerReady(workerId as aid,worker as text, type as text)
	predicate SupplierRunOutSupply(bakerWhileProparing as boolean)
	predicate OrderStatus(orderId as text, status as text) #notification of clompletion
	predicate BakerRaportInfo(id as aid, numRestockFromColl as integer, numRestockFromSupp as integer, numOrdersToRedo as integer,ordersDone as integer, restStock as list of IngredientQuantity)
	predicate PackerRaport(pcgPrep as list of PackagePreparation)
	
	proposition AgentsReported
	proposition EndOfPrivateOrders
    proposition EndOfOrders
    proposition GroupEndedDay
    proposition EndOfDay
    #proposition SupplierRunOutSupply
    
    
	
	#action NotifyCompletion(orderId as text)
	
	#action RedoOrder(orderId as text)
	#action HelpWithIngredients(ingredients as list of IngredientQuantity)
	
	action SubmitPackage(packageOfGoods as PackageOfGoods)
	action RejectPackage(packageId as text, reason as text)
	action RepackedPackage(packageId as text)
	
	
	predicate PackageStatus(pcg as PackageOfGoods)
	#predicate IngredientsShortage(ingredientQuan as IngredientQuantity, quantityNeed as integer)
	
	proposition OrderRedoRequired
	proposition PackageReady
	proposition PackageRejected
	proposition OrderCorrect
	
	
	#statuses: pending (before everything), toPrepare (just send), waitIngredients (if not enought inngredients), preparing, baking, toFix, finished