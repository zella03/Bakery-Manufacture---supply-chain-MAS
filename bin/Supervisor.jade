agent Supervisor uses ontology BakeryOntology
    #property order1 = Order("1","bread","pending","normal")
    #property order2 = Order("2","cookies","pending","normal")
    #property order3 = Order("3","cookies","pending","normal")
    
    property orderBread = OrderQuantity("bread","normal",1)
    property orderBun = OrderQuantity("bun","normal",1)
    property orderCookies = OrderQuantity("cookies","normal",1)
    
    property orderCake = OrderQuantity("cake","private",0)
    property orderCupcake = OrderQuantity("cupcake","private",0)
    
    property privateOrders = [orderCake, orderCupcake]
    property normalOrders = [orderBread, orderBun, orderCookies]
    #property ordersToGive as list of OrderQuantity
    
    property orderList as list of Order
    property pendingOrders as list of OrderStatus
    property type as text
    property orderCount as integer
    
    #procedure SplitOrdersByType do
    #    for i in orderList do
    #        if type of i = "normal" do
    #            add i to normalOrders
    #        else do
    #            add i to privateOrders
    
    procedure SplitIntoOrders with listOfOrders as list of OrderQuantity,ratio as integer do
        for i in listOfOrders do
            if quantity of i ≠ 0 do
	            for j in 0 to ((quantity of i/ratio)-1) do
	                log name of agent +"_"+j+ " got in here: "+(quantity of i/ratio)
	                id = (name of agent + "_" + orderCount) as text
	                add Order(id,good of i,"pending",type of i) to orderList
	                orderCount = orderCount + 1
        log "Splitted orders: "+orderList
                
    
    on create with type as text do
        type of agent = type
        orderCount of agent = 0
        log "Agent 'Supervisor' created with arguments: "+type
        #log orderList
        #log pendingOrders
        
        #do SplitOrdersByType
        
        if type of agent = "normal" do
            do SplitIntoOrders with normalOrders,1
        else do
            do SplitIntoOrders with privateOrders,1
            
        activate SendOrder
        

cyclic behaviour SendOrder for agent Supervisor
        
    on activate do
        activate WaitingForFinishedOrders
        
    on message request RequestOrder(id) do
        #order = Order("1","bread","pending")
        senderAgent = sender of message
        
        if length of orderList ≠ 0 do
	       order = orderList[0]
	       orderStatus = OrderStatus(id of order, status of order)
           remove order from orderList
           add orderStatus to pendingOrders
            
           log orderList
           log pendingOrders
        
	       log "Agent: "+name of agent+" received request for order from agent: " + name of sender
	       send message request AssignOrder(id,order) to senderAgent
	    else if type of agent = "private" do
	       type of agent = "normal"
	       log "End of private orders. Lets do some normal orders."
	       do SplitIntoOrders with normalOrders,1 #private have to do 2 time less that normal had to do normal orders (plan 3x less)
	       send message inform EndOfPrivateOrders to senderAgent
	    else do
	       log "No more orders"
	       deactivate this

cyclic behaviour WaitingForFinishedOrders for agent Supervisor uses ontology BakeryOntology
    on message inform OrderStatus(orderId,orderStatus) do
        #if wylosowane odesłane do poprawki
        for i in pendingOrders do
            if orderId of i = orderId do
                status of i = orderStatus
                break
        log orderList
        log pendingOrders
        
cyclic behaviour CheckIfPrivate for agent Supervisor uses ontology BakeryOntology
    property noMorePrivateOrder = true
    
    on execute do
        for order in orderList do
            if type of order = "private" do            
                noMorePrivateOrder = false
                break
                
        # jednak może zrobić tak że jeżeli jest private Baker to on przed zapytaniem najpierw się pyta czy są jeszcze jakieś nowe private
        # jeżeli nie to się zamienia w normalsa
        # aaaaalbo Supervisor jeżeli pyta się private to wyśle wiadomość z nowym orderem i kontentem ze nie ma już private !!!!
            
        
        #if length of orderList % 8 != 0 do
            