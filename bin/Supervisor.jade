agent Supervisor uses ontology BakeryOntology
    property orderBread = OrderQuantity("bread","normal",3)
    property orderBun = OrderQuantity("bun","normal",3)
    property orderCookies = OrderQuantity("cookies","normal",3)
    
    property orderCake1 = OrderQuantity("cake","private",1)
    property orderCupcake1 = OrderQuantity("cupcakes","private",1)
    property orderCake2 = OrderQuantity("cake","private",1)
    property orderCupcake2 = OrderQuantity("cupcakes","private",1)
    
    property package1 = PackageOfGoods(
    	"Pcg1",[orderCake1,orderCupcake1],"pending"
    )
    property package2 = PackageOfGoods(
    	"Pcg2",[orderCake2,orderCupcake2],"pending"
    )
    property privateOrders = [package1, package2]
    
    property finishedPackages as list of PackageOfGoods
    property normalOrders = [orderBread, orderBun, orderCookies]
    
    property orderList as list of Order
    property pendingOrders as list of OrderStatus
    property type as text
    property numOfWorkers as integer
    property coSupplier as text
    property orderCount as integer
    property listOfBakers as list of WorkerReady
    property packer as aid
    property supplierList as list of aid
    
    
    procedure SplitIntoOrdersNormal with listOfOrders as list of OrderQuantity,ratio as integer do
        for i in listOfOrders do
            if quantity of i ≠ 0 do
	            for j in 0 to ((quantity of i/ratio)-1) do
	                id = (name of agent + "_" + orderCount) as text
	                add Order(id,good of i,"pending",type of i) to orderList
	                orderCount = orderCount + 1
        log "Splitted orders of SUPERVISOR: "+orderList
    
    procedure SplitIntoOrdersPrivate with listOfPackages as list of PackageOfGoods do
        for pcg in listOfPackages do
            for order in ordersInPackage of pcg do 
	            if quantity of order ≠ 0 do
	                for j in 0 to (quantity of order-1) do
	                    id = (name of agent + "_" + orderCount) as text
	                    add Order(id,good of order,"pending",type of order) to orderList
	                    orderCount = orderCount + 1
        log "Splitted orders of SUPERVISOR: "+orderList
                
    
    on create with type as text, numOfWorkers as integer, coSupplier as text do
        type of agent = type
        numOfWorkers of agent = numOfWorkers
        orderCount of agent = 0
        coSupplier of agent = coSupplier
        log "SUPERVISOR created with arguments: "+type
        
        if type of agent = "normal" do
            do SplitIntoOrdersNormal with normalOrders,1
        else do
            do SplitIntoOrdersPrivate with privateOrders
        activate ReportingWorkers

cyclic behaviour ReportingWorkers for agent Supervisor uses ontology BakeryOntology
    #property count as integer
    property allReported as boolean
    property packerReady as boolean
    property supplierReady as boolean
    on create do
        #count = 0
        otherGroupEnded = false
        allReported = false
        if type = "private" do
            packerReady = false
            supplierReady = false
        else do
            packerReady = true
            supplierReady = true
        
    on execute do
        if allReported and packerReady and supplierReady do
	       for worker in listOfBakers do
	           send message inform AgentsReported to workerId of worker
	       activate SendOrder
	       deactivate this	   
        
    on message inform WorkerReady(id,worker,workerType) do
        senderAgent = sender of message
        if worker = "baker" do
	       add WorkerReady(senderAgent,worker,workerType) to listOfBakers
	       #log "BAKERS which reported - ready to work: "+listOfBakers
	       #count = count + 1
	    else if worker = "packer" do
	       packer of agent = senderAgent
	       packerReady = true
	       send message request ProvidePackingList(privateOrders) to packer
	    else if worker = "supplier" do
	       add senderAgent to supplierList
        
        if length of listOfBakers = numOfWorkers do
           allReported = true
        
        if length of supplierList = 2 do
           supplierReady = true

cyclic behaviour SendOrder for agent Supervisor uses ontology BakeryOntology
    property currentWorkerType as text
    property eandOfPrivateOrders as boolean
    
    function checkIfWorkerReported(id as aid) as boolean do
        if length of listOfBakers ≠ 0 do
	        for worker in listOfBakers do
	            if workerId of worker = id do
	                currentWorkerType = type of worker
	                return true
        return false
        
    procedure ChangeTypeOfAgent with id as aid do
        if length of listOfBakers ≠ 0 do
	        for worker in listOfBakers do
	            if workerId of worker = id do
	                type of worker = "normal"
	                log "BAKER: "+worker+" changed into type 'normal'"
	                break
        
    on activate do
        eandOfPrivateOrders = false
        activate WaitingForFinishedOrders
        
    on message request RequestOrder(id) do
        senderAgent = sender of message
        momentOfChangeType = false
        
        if checkIfWorkerReported(id) do #should check if agent is on the list of working bakers
            if currentWorkerType = "private" and (length of orderList = 0) do #first time asking if sent of private
               log "END OF PRIVATE ORDERS. Lets do some normal orders."
               type = "normal"
               do SplitIntoOrdersNormal with normalOrders,3
               eandOfPrivateOrders = true
               
            if currentWorkerType = "private" and eandOfPrivateOrders do
                send message inform EndOfPrivateOrders to senderAgent
                do ChangeTypeOfAgent with id
                momentOfChangeType = true
            
            if not momentOfChangeType do
		        if length of orderList ≠ 0 do
			       order = orderList[0]
			       orderStatus = OrderStatus(id of order, status of order)
		           remove order from orderList
		           add orderStatus to pendingOrders
		            
		           log "REQUEST - Orders to make under SUPERVISOR"+ name of agent+" list: "+orderList
		           log "REQUEST - Orders PENDING under SUPERVISOR"+ name of agent+" list: "+pendingOrders
		        
			       log "SUPERVISOR: "+name of agent+" received request for order from agent: " + name of sender
			       send message request AssignOrder(id,order) to senderAgent
			    else do
			       log "NO MORE ORDERS under SUPERVISOR: "+ name of agent
			       send message inform EndOfOrders to senderAgent
			       # info że koniec i nie ma się więcej pytać -> ale trzeba sprawdzić dla każdego
			       deactivate this
		else do
		  log "not yet reported"

cyclic behaviour WaitingForFinishedOrders for agent Supervisor uses ontology BakeryOntology
    property count as integer
    property otherGroupEnded as boolean
    property meNotEnded as boolean
    
    function allOrdersFinished as boolean do
        for order in pendingOrders do
            if status of order ≠ "finished" do
                return false
        if type = "private" do
	        for pcg in privateOrders do
	            if status of pcg ≠ "finished" do
	                return false
        return true
        
    on create do
        meNotEnded = true
        otherGroupEnded = false
        count = 0
        
    on execute do
        if type = "normal" and allOrdersFinished and length of orderList = 0 and meNotEnded do
            log "Ended+sending -- entered here: "+coSupplier+" __ "+coSupplier@
            send message inform GroupEndedDay to coSupplier@
            meNotEnded = false
        else if type = "normal" and allOrdersFinished and length of orderList = 0 and otherGroupEnded do
            log "hi from sending end of the dayy"
            for baker in listOfBakers do
                send message inform EndOfDay to workerId of baker
            if length of supplierList ≠ 0 do #if means its the supplier2
	            for supplier in supplierList do
	                send message inform EndOfDay to supplier
	            send message inform EndOfDay to packer
            activate FinishRaports
            deactivate this
            
            #i tutaj wysyłanie info do wszyyystkich że halo halo koniec dnia
        
    on message inform GroupEndedDay do
        otherGroupEnded = true
        log "Talking to co supp-- entered here"
    
    on message inform OrderStatus(orderId,orderStatus) do
        senderAgent = sender of message
        if count % 5 ≠ 0 do #each 5th should be send to redo
	        for i in pendingOrders do
	            if orderId of i = orderId do
	                status of i = orderStatus
	                break
	        log "FINISHING - Orders to make under SUPERVISOR"+ name of agent+" list: "+orderList
	        log "FINISHING - Orders PENDING under SUPERVISOR"+ name of agent+" list: "+pendingOrders
	        
	        
	        log "type: "+type+" allOrdersFinished: "+allOrdersFinished+" orderList: "+orderList+" meNotEnded: "+meNotEnded
	        #send message request_when (RedoOrder(orderId,"No need"),OrderCorrect) to senderAgent
	        send message request RedoOrder(orderId,"No need") to senderAgent
        else do
            #send message request_when (RedoOrder(orderId,"Order not done correctly"),OrderRedoRequired) to senderAgent
            send message request RedoOrder(orderId,"Order not done correctly") to senderAgent
        count = count + 1
        
    on message inform PackageStatus(orderPacked) do
        allPacked = false
        
        for pcg in privateOrders do
            if packageId of pcg = packageId of orderPacked do
                status of pcg = status of orderPacked
                break
        
        log "Ready packages: "+privateOrders
        
        for pcg in privateOrders do
            if status of pcg ≠ "finished" do
                break
            else do
                allPacked = true
                
        if allPacked do
            log "ALL packages packed"
            
cyclic behaviour FinishRaports for agent Supervisor uses ontology BakeryOntology
    on create do
        log "Hello in finish repo"